/*
 * News Manager
 *
 * UPDAY: frontend task. This service should provide a basic rest API to be used in the upday frontend task.
 *
 * API version: 0.0.1
 * Contact: thun@upday.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package model

import (
	"errors"
	"net/mail"
	"strings"
	"time"

	"github.com/hashicorp/go-multierror"
)

const (
	NewsDraftStatus     = "draft"
	NewsPublishedStatus = "published"
	NewsArchivedStatus  = "archived"
)

var ErrInvalidAuthor = errors.New("author: Invalid")
var ErrInvalidTitle = errors.New("title: Invalid")
var ErrInvalidDescription = errors.New("description: Invalid")
var ErrInvalidImageURL = errors.New("imageURL: Invalid")
var ErrInvalidStateTransition = errors.New("status: invalid transition")

type News struct {
	Id string `json:"id,omitempty"`

	BoardId string `json:"boardId,omitempty"`

	Author string `json:"author,omitempty"`

	Title string `json:"title,omitempty"`

	Description string `json:"description,omitempty"`

	ImageURL string `json:"imageURL,omitempty"`

	Status string `json:"status,omitempty"`

	CreatedAt time.Time
}

func (news *News) ValidateAuthor() error {
	_, err := mail.ParseAddress(news.Author)
	if err != nil {
		return ErrInvalidAuthor
	}
	return nil
}

func (news *News) ValidateNewStatus(newStatus string) error {
	if news.Status == NewsArchivedStatus && newStatus != NewsArchivedStatus {
		return ErrInvalidStateTransition
	} else if newStatus == NewsPublishedStatus {
		return news.Validate()
	}

	return nil
}

func (news *News) Validate() error {
	result := news.ValidateAuthor()

	if strings.TrimSpace(news.Title) == "" {
		result = multierror.Append(result, ErrInvalidTitle)
	}
	if strings.TrimSpace(news.Description) == "" {
		result = multierror.Append(result, ErrInvalidDescription)
	}
	if strings.TrimSpace(news.ImageURL) == "" {
		result = multierror.Append(result, ErrInvalidImageURL)
	}

	return result
}

type ByNews []*News

func (a ByNews) Len() int           { return len(a) }
func (a ByNews) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
func (a ByNews) Less(i, j int) bool { return a[i].CreatedAt.Before(a[j].CreatedAt) }
